package com.openexchange.coi.services.push.rest.header.test;

import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.nullValue;
import static org.junit.Assert.assertThat;
import java.util.Arrays;
import java.util.List;
import org.junit.Test;
import com.openexchange.coi.services.push.rest.header.VAPIDHeader;

/**
 * {@link VAPIDHeaderTest} - Contains tests for the {@link VAPIDHeader} class.
 *
 * @author <a href="mailto:benjamin.gruedelbach@open-xchange.com">Benjamin Gruedelbach</a>
 * @since v1.0.0
 */
public class VAPIDHeaderTest {

	private static List<String> testHeaders;
	private static List<String> invalidTestHeaders;

	static {
		//Test Headers:
		
		testHeaders = Arrays.asList(

				//Test Header VAPID RFC
				"Authorization: vapid\n" + "t=eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJhdWQiOiJodHRwczovL3\n"
						+ "B1c2guZXhhbXBsZS5uZXQiLCJleHAiOjE0NTM1MjM3NjgsInN1YiI6Im1ha\n"
						+ "Wx0bzpwdXNoQGV4YW1wbGUuY29tIn0.i3CYb7t4xfxCDquptFOepC9GAu_H\n"
						+ "LGkMlMuCGSK2rpiUfnK9ojFwDXb1JrErtmysazNjjvW2L9OkSSHzvoD1oA,\n"
						+ "k=BA1Hxzyi1RUM1b5wjxsn7nGxAszw2u61m164i3MrAIxHF6YK5h4SDYic-dR\n"
						+ "uU_RCPCfA5aq9ojSwk5Y2EmClBPs",

				//Test generated by https://jrconlin.github.io/WebPushDataTestPage/
				"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.\n"
						+ "eyJhdWQiOiJodHRwOi8vYmxhLmRlIiwic3ViIjoibWFpbHRvOmljaEBibG\n"
						+ "EuZGUiLCJleHAiOiIxNTYyMzEwODY3In0.tS0jvK3dt_nhSN_4drfxpRrN\n"
						+ "VsvYqEVfTllCtN3NkfsAQGZ-P35Pq0Iea_RtLpjUg6g_lTXgwGbW8mKvL-LMQQ"
		);

		invalidTestHeaders = Arrays.asList(
				//garbage
				"jdslkfjdlf",
				
				//missing JWT
				"Authorization: vapid",
				
				//Invalid JWT
				"Authorization: vapid jfsldfj",

				//Invalid JWT#2
				"Authorization: vapid t=jfsldfj, k=ksdfj"
		);
	}

	/**
	 * Common assertions for valid tokens
	 * 
	 * @param jwt The token to assert
	 * @throws AssertionError if an assertion is not met
	 */
	private void assertJWT(String jwt) {
		assertThat("The parsed jwt must not be null", jwt, not(is(nullValue())));
		assertThat("The parsed jwt must not contain spaces", jwt, not(containsString(" ")));
		int dotCount = jwt.length() - jwt.replace(".", "").length();
		assertThat("The parsed jwt must contain exactly thre parts separated by two dots", dotCount, is(2));
	}

	/**
	 * Tests the parsing of all testHeader
	 */
	@Test
	public void testExtractJWT() throws Exception {
		for (String testHeader : testHeaders) {
			String jwt = new VAPIDHeader(testHeader).getJWT();
			assertJWT(jwt);
		}
	}
	
	/**
	 * Test that invalid  
	 */
	@Test
	public void testExtractInvalidJWTShouldFail() {
		for(String invalidTestHeader : invalidTestHeaders) {
            new VAPIDHeader(invalidTestHeader).getJWT();
            //            assertJWT(jwt);
		}
	}
}
